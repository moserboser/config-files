# wal for custom colors
exec ~/.config/sway/scripts/startup_wal.sh 
include "$HOME/.cache/wal/colors-sway"
exec_always swaybg -i $wallpaper -m fill

# Wait until a StatusNotifierItem tray implementation is available and
# process XDG autostart entries.
#
# This horror has to exist because
#
#  - SNI spec mandates that if `IsStatusNotifierHostRegistered` is not set,
#    the client should fall back to the Freedesktop System Tray specification
#    (XEmbed).
#  - There are actual implementations that take this seriously and implement
#    a fallback *even if* StatusNotifierWatcher is already DBus-activated.
#  - https://github.com/systemd/systemd/issues/3750
#
exec /usr/libexec/sway-systemd/wait-sni-ready && \
    systemctl --user start sway-xdg-autostart.target

# Start graphical authentication agent for PolicyKit.
#
# Certain applications may require this to request elevated privileges:
#   GParted, virt-manager, anything that uses pkexec
#
# Requires: lxqt-policykit

exec /usr/libexec/lxqt-policykit-agent

# gammastep 
exec --no-startup-id gammastep 
exec --no-startup-id gammastep-indicator

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
# Recommends: foot
set $term alacritty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# Recommends: rofi-wayland
set $rofi_cmd rofi \
        -terminal '$term'
# Shows a combined list of the applications with desktop files and
# executables from PATH.
set $menu $rofi_cmd -show combi -combi-modes "drun,run" #run -modes combi


# bluetooth 
exec --no-startup-id bluetoothctl power on
exec --no-startup-id blueman-applet

#
### run deamons and applications
#

# run notification deamon
exec --no-startup-id swaync

# run network manager applet
exec_always --no-startup-id nm-applet

# rund volume and sound applet
exec --no-startup-id volumeicon

#
### Idle configuration
#

exec_always LT="$lock_timeout" ST="$screen_timeout" LT=${LT:-300} ST=${ST:-60} && \
    swayidle -w \
        timeout $LT 'swaylock -n -e -i ~/Pictures/backgrounds/catpuchin/kittyboard.png' \
        timeout $((LT + ST)) 'swaymsg "output * power off"' \
                      resume 'swaymsg "output * power on"'  \
        timeout $ST 'pgrep -xu "$USER" swaylock >/dev/null && swaymsg "output * power off"' \
             resume 'pgrep -xu "$USER" swaylock >/dev/null && swaymsg "output * power on"'  \
        before-sleep 'swaylock -f' \
        lock 'swaylock -n -e -i ~/Pictures/backgrounds/catpuchin/kittyboard.png' \
        unlock 'pkill -xu "$USER" -SIGUSR1 swaylock'

